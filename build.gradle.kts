/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// global build settings
object Settings {
    val VERSION = "0.0.0"
    val BASE_NAME = "puppet"
}

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.41"
    id("com.github.johnrengelman.shadow") version "5.2.0"
    maven

    // Apply the application plugin to add support for building a CLI application.
    application
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    maven { // spigot
        url = uri("https://hub.spigotmc.org/nexus/content/repositories/snapshots/")
    }
    maven { // paper
        url = uri("https://papermc.io/repo/repository/maven-public")
    }
    maven {
        url = uri("https://ci.ender.zone/plugin/repository/everything")
    }
}

dependencies {
    // Align versions of all Kotlin components
    compileOnly(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    compileOnly("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Paper spigot mc 1.15
    // implementation("com.destroystokyo.paper:paper-api:1.15.1-R0.1-SNAPSHOT")

    // google json
    compileOnly("com.google.code.gson:gson:2.8.6")

    // paper mc 1.15
    implementation("com.destroystokyo.paper:paper-api:1.15.2-R0.1-SNAPSHOT")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

application {
    // Define the main class for the application.
    mainClassName = "phonon.puppet.PuppetPluginKt"
}

tasks.withType<KotlinCompile> {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = listOf("-Xallow-result-return-type")
}

tasks {
    named<ShadowJar>("shadowJar") {
        baseName = Settings.BASE_NAME
        classifier = ""
        configurations = mutableListOf(project.configurations.named("compileOnly").get())
        relocate("com.google", "shadow.gson")
        minimize()
    }

    build {
        dependsOn(shadowJar)
        doLast {
            println("[BUILD] VERSION LOLE ${version}")
        }
    }
    
    test {
        testLogging.showStandardStreams = true
    }
}

// production build
tasks.register("release") {
    dependsOn("build")
}

gradle.taskGraph.whenReady {
    if ( hasTask(":release") ) {
        version = "${Settings.VERSION}"
    }
    else { // dev build
        version = "${Settings.VERSION}-SNAPSHOT"
    }
}